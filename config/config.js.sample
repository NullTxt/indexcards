import { config as envconfig } from 'dotenv';

envconfig();

export const config = {
	PORT                  : 8001,
	RATE_WINDOW           : 15 * 60 * 1000,
	RATE_MAX              : 100000,
	RATE_DELAY            : 0,
	BASE_URL 			  : 'http://api.dev.tabroom.com',
	LOGIN_URL             : 'http://mason.dev.tabroom.com/user/login/login.mhtml',
	DOCKERHOST		      : 'devenv',
	CODE_PATH             : '/www/indexcards',
	MAIL_FROM			  : 'live@www.tabroom.com',
	MAIL_SERVER			  : 'localhost',
	MAIL_PORT			  : 25,
	ERROR_DESTINATION	  : ['errors@tabroom.com'],
	LOGIN_TOKEN			  : 'flurgleflimmer',
	JITSI_KEY             : 'campus-jitsi-key',
	JITSI_URI             : 'https://campus.speechanddebate.org',
	CASELIST_KEY          : 'caselist-key',
	SHARE_KEY             : 'fd4af7c6f485',
	SHARE_SMTP_HOST       : '192.168.37.28',
	SHARE_SMTP_USER       : 'share@share.tabroom.com',
	SHARE_SMTP_PASS       : 'sharepass',
	IPLOCATION            : '/var/lib/GeoIP/GeoLite2-City.mmdb',
	IPISP                 : '/var/lib/GeoIP/GeoIP2-ISP.mmdb',
	S3_URL				  : 'https://s3.amazonaws.com/tabroom-files/tourns',
	COOKIE_NAME           : 'TabroomLocal',
	COOKIE_DOMAIN         : '.dev.tabroom.com',
	DB_PORT               : '3306',
	DB_DATABASE           : 'tabroom',
	NSDA 				  : {
		USER_ID  : '12345678',
		KEY      : 'IAmNotAPassword',
		ENDPOINT : 'https://test-api.speechanddebate.org',
		PATH     : '/v2',
		PRODUCT_CODES : {
			tabroom   : 11111,
			nc        : 22222,
			nco       : 33333,
		},
	},
	NAUDL				  : {
		USERNAME			: 'nope@nopesauce.org',
		PW					: 'ThisIsAlsoNotAPassword',
		TOKEN				: 'NotAToken',
		CLIENT_SECRET		: 'DoNotEvenThinkIt',
		CLIENT_ID			: 'IDontThinkThisWasSecretButWhyChanceIt',
		URL					: 'https://urbandebate.my.salesforce.com',
		TOURN_ENDPOINT		: '/services/apexrest/v.1/TournamentService',
		STUDENT_ENDPOINT	: '/services/apexrest/v.1/StudentServiceTabroom',
		STA_ENDPOINT		: '/services/apexrest/v.1/STATabroomService',
	},
	ONE_SIGNAL    : {
		app_id    : 'DefNot',
		safari_id : 'LolzDoesNotEvenWork',
		userKey   : 'IThinkNot',
		appKey    : 'Naught',
	},
	AWS_CREDENTIALS        : {
		accessKeyId        : 'DefNo',
		secretAccessKey    : 'DoNotTry',
		region             : 'us-east-1',
		Bucket             : 'tabroom-files',
	},
	sequelizeOptions : {
		dialect : 'mariadb',
		define  : {
			freezeTableName : true,
			modelName       : 'singularName',
			underscored     : true,
			timestamps      : false,
		},
	},
	winstonConsoleOptions : {
		silent : false,
		level  : 'debug',
	},
	winstonFileOptions : {
		maxsize  : 512 * 1024 * 1024,
		maxFiles : 8,
		tailable : true,
	},
};

const env = process.env.NODE_ENV || 'development';

/* eslint-disable indent */
switch (env) {
	case 'staging':
		config.DB_HOST          = 'localhost';
		config.DB_USER          = 'tabroom';
		config.DB_PASS          = '';
		config.MESSAGE_RATE_MAX = '1000000000';
		config.LOG_PATH         = '/var/log/indexcards';
		break;

	case 'development':
		config.DB_HOST          = 'localhost';
		config.DB_USER          = 'tabroom';
		config.DB_PASS          = 'lolz',
		config.MESSAGE_RATE_MAX = '1000000000';
		config.sequelizeOptions.logging = false;
		config.LOG_PATH         = '/var/log/indexcards';
		break;

	case 'test':
		config.DB_HOST                  = 'localhost';
		config.DB_USER                  = 'tabroom';
		config.DB_PASS                  = 'DoNotBeANoob';
		config.MESSAGE_RATE_MAX         = '1000000000';
		config.sequelizeOptions.logging = false;
		config.MODE                     = 'test';
		break;

	default:
		break;
}
/* eslint-enable indent */

config.sequelizeOptions.host = config.DB_HOST;

// Override any config value if corresponding env var is set
const configKeys = Object.keys(config);
const envKeys = Object.keys(process.env);

configKeys.forEach((key) => {
	if (envKeys.includes(key)) {
		config[key] = process.env[key];
	}
	if (config[key] === 'true') { config[key] = true; }
	if (config[key] === 'false') { config[key] = false; }
});

export default config;
