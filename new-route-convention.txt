
before I get too deep into the weeds of the current API setup, perhaps some rationality,
or at least some system that isn't the present total chaos.

TOP LEVEL:  

	based on AUTHENTICATION STYLE.  Some of the names are a touch awkward because the intent 
	is to reserve data types (tourn, school, chapter) for the expression of those only. 

	/auto  	- public jobs with internal effects.  Autoqueue executors basically

	/ext 	- External APIs requiring an account with an API key to determine their scope

	/tab 	- APIs and functions related to tabulation of a tournament.  
		   	  Depends on tourn permissions

	/coach 	- APIs and functions related to school/chapter administration.  
			  Depends on chapter permissions

	/user	- Everything that is only personalized to a user's own account.  Student
			  landing page, judge landing page, personal results records, paradigm 
			  editing

	/glp 	- Only those with godlike powers may enter here. 

	/local	- Managers of various subdivisions of Tabroom.  This will include 
			  district committee members, NCFL dioceses, circuits, etc.  The auth
			  layers here will be one level down which I guess breaks the convention, 
			  but I don't care that much because otherwise I'd have to make six more
			  top levels. 

CONVENTION:

	Underneath each top level should be the data area being operated on, followed by the
	ID of that area, followed by a functional breakdown. 

	/tab/tourn/12345 -> get -> get a data backup of the whole tourn. post uploads a backup file.
	/tab/tourn/12345/setting/nsda_district -> get/post/put/delete -> get or affect this setting

	/tab/round/12345 -> get -> get databackup like above.  post uploads the same.
	/tab/round/12345/schemat -> get a schematic only representation of a round.  depending on what 
		I do with the front end, this type of thing may not be desirable?

Reserve plural for multiple reports based on this as primary for a one-to-many relationship:
	/tab/tourn/12345/events -> get -> get all events from the tourn
	/tab/tourn/12345/sites -> get -> get all sites
	/tab/tourn/12345/status -> get -> get current event status
		These could all be the same function but hide that from the endpoint tree and user
		because why should they care. 

	/tab/event/12466/rounds -> get all the rounds in this event

	/tab/timeslot/23586/dashboard -> get -> get all timeslot dashboard status
	/tab/round/233485/dashboard -> get -> get all round dashboard status
	/tab/event/9535385/dashboard -> get -> get all event dashboard status

Functional things should be simple commands defaulting to GET, placed in the tree underneath 
the thing operated on. Don't go too nuts with the escalating trees of doom; the single smallest
necessary ID numbers are best.  Actions should as much as possible reflect what data is affected
or added or something. 

use 'place' as a verb that is particular to the pairing/schematic/etc process.  Always use a verb
when the backend is going to be manipulating data instead of simply delivering or accepting it. 

	/tab/round/151551/placeEntries -> GET -> pair the round
	/tab/round/151551/placeJudges -> GET -> place the judges
	/tab/round/151551/placeRooms -> GET -> place the rooms

Attach mass actions below the parent container
	/tab/event/58125/rounds/placeEntries -> GET -> pair all the event's rounds
	/tab/timeslot/395585/rounds/placeJudges -> GET -> place all the timeslot's judges

Spec after everything if available
	/tab/event/58125/rounds/placeEntries/prelims -> GET -> pair all the event's prelims

And then the results and whatever else live in the same place
	
	/tab/event/58125/results 			overall results
	/tab/event/58125/results/speakers 	overall speaker results
	/tab/round/3558125/results 			results as of round whatever

	/tab/sweeps/3595/results			results of the sweepstakes protocol.
